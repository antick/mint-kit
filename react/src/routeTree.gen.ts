/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as LoginImport } from './routes/login'
import { Route as ForgotPasswordImport } from './routes/forgot-password'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const ProtectedUsersLazyImport = createFileRoute('/_protected/users')()
const ProtectedTasksLazyImport = createFileRoute('/_protected/tasks')()
const ProtectedSettingsLazyImport = createFileRoute('/_protected/settings')()
const ProtectedResetPasswordLazyImport = createFileRoute(
  '/_protected/reset-password',
)()
const ProtectedProfileLazyImport = createFileRoute('/_protected/profile')()
const ProtectedPostsLazyImport = createFileRoute('/_protected/posts')()
const ProtectedDashboardLazyImport = createFileRoute('/_protected/dashboard')()
const ProtectedCampaignLazyImport = createFileRoute('/_protected/campaign')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const SignUpRoute = SignUpImport.update({
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ForgotPasswordRoute = ForgotPasswordImport.update({
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedUsersLazyRoute = ProtectedUsersLazyImport.update({
  path: '/users',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/users.lazy').then((d) => d.Route),
)

const ProtectedTasksLazyRoute = ProtectedTasksLazyImport.update({
  path: '/tasks',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/tasks.lazy').then((d) => d.Route),
)

const ProtectedSettingsLazyRoute = ProtectedSettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/settings.lazy').then((d) => d.Route),
)

const ProtectedResetPasswordLazyRoute = ProtectedResetPasswordLazyImport.update(
  {
    path: '/reset-password',
    getParentRoute: () => ProtectedRoute,
  } as any,
).lazy(() =>
  import('./routes/_protected/reset-password.lazy').then((d) => d.Route),
)

const ProtectedProfileLazyRoute = ProtectedProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/profile.lazy').then((d) => d.Route),
)

const ProtectedPostsLazyRoute = ProtectedPostsLazyImport.update({
  path: '/posts',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/posts.lazy').then((d) => d.Route),
)

const ProtectedDashboardLazyRoute = ProtectedDashboardLazyImport.update({
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/dashboard.lazy').then((d) => d.Route),
)

const ProtectedCampaignLazyRoute = ProtectedCampaignLazyImport.update({
  path: '/campaign',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/campaign.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/_protected/campaign': {
      id: '/_protected/campaign'
      path: '/campaign'
      fullPath: '/campaign'
      preLoaderRoute: typeof ProtectedCampaignLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/posts': {
      id: '/_protected/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof ProtectedPostsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/reset-password': {
      id: '/_protected/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ProtectedResetPasswordLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/tasks': {
      id: '/_protected/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof ProtectedTasksLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/users': {
      id: '/_protected/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof ProtectedUsersLazyImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  ProtectedRoute: ProtectedRoute.addChildren({
    ProtectedCampaignLazyRoute,
    ProtectedDashboardLazyRoute,
    ProtectedPostsLazyRoute,
    ProtectedProfileLazyRoute,
    ProtectedResetPasswordLazyRoute,
    ProtectedSettingsLazyRoute,
    ProtectedTasksLazyRoute,
    ProtectedUsersLazyRoute,
  }),
  ForgotPasswordRoute,
  LoginRoute,
  SignUpRoute,
  AboutLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/forgot-password",
        "/login",
        "/sign-up",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/campaign",
        "/_protected/dashboard",
        "/_protected/posts",
        "/_protected/profile",
        "/_protected/reset-password",
        "/_protected/settings",
        "/_protected/tasks",
        "/_protected/users"
      ]
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/_protected/campaign": {
      "filePath": "_protected/campaign.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/posts": {
      "filePath": "_protected/posts.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/profile": {
      "filePath": "_protected/profile.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/reset-password": {
      "filePath": "_protected/reset-password.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/settings": {
      "filePath": "_protected/settings.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/tasks": {
      "filePath": "_protected/tasks.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/users": {
      "filePath": "_protected/users.lazy.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
